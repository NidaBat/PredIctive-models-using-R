<style>
/* slide titles */
.section .reveal .state-background {
background: white;
}
.section .reveal p {
font-family: Verdana, Arial, Helvetica, sans-serif;
color: rgb(255, 87, 51);
text-align:right; width:100%;
line-height: 0.1em;
#margin-top: 70px;
}
.section .reveal h1, .section .reveal h2, .section {
font-family: Verdana, Arial, Helvetica, sans-serif;
color: #2B89F9;
margin-top: 50px;
}
.reveal pre code {
	font-family: Verdana, Arial, Helvetica, sans-serif;
  background-color: #E8F6FC;
  color: green;
  font-size: 40px;
  #position: fixed; top: 90%;
  #text-align:center; width:100%;
  }
.reveal h3 { 
  font-size: 65px;
  color: #2B89F9  ;
}

/* heading for slides with two hashes ## */
.reveal .slides section .slideContent h2 {
   font-size: 37px;
   font-weight: bold;
   color: green;
}

/* ordered and unordered list styles */
.reveal ul, 
.reveal ol {
    font-size: 37px;
    color: #FF5733;
    list-style-type: square;
  
  .reveal h1, .reveal h2, .reveal h3 {
  word-wrap: normal;
  -moz-hyphens: none;
  }

</style>
---
title: "Coursera/Johns Hopkins University- Data Science Capstone"
author: "Nida Batt"
date: "November 27, 2017"
output:
  ioslides_presentation:
    logo: logos/swiftkey.jpeg
    theme: "cosmo"
font-family: 'verdana'
transition: rotate   
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

##The Applied Methods & Models

- The [application](https://nidabatt.shinyapps.io/Swiftkey/)is built on shiny app to predict the next word user wants to type. 

- Dataset used for next word prediction was collected from twitter, news and blogs at [HC Corpora](http://www.corpora.heliohost.org/).

- Multiple tasks were performed -including data cleansing, exploratory analysis, the creation of a predictive model before launching the app.

- All text mining and natural language processing was done using the R packages `tm`, `ngram` to create the set of word combinations. 

- [N-grams](https://en.wikipedia.org/wiki/N-gram) creation provided the main support to <b>[Katz Backoff](https://en.wikipedia.org/wiki/Katz%27s_back-off_model)</b> algorithm to predict the next word. 

## How the app works

- Type a word, phrase or sentence. The app shows the word/text the user has entered, followed by cleansed form. 

- As the main result, until the top five (more probable) n-grams predictions are displayed in a list control. 

- The user can review or swap the input data, and the app will return back to present more  predicted words. 

- Here is an example of how 4 lines of *_"quardgrams"_* are loaded by Shiny App.

```{r,echo=FALSE}
df4<-readRDS("qardgrams.RDATA")
library(knitr)
kable(head(df4[c(1:2,5)],4), 'html', table.attr='id="df4_table"')
```
- Another tab offers a more extensive documentation.


## Shiny App User Interface

![Shiny App Input- Next Word Prediction](logos/ScreenShot.png)

- Average response time under 4-5 seconds.

- Total prossessing time is around 302.158 msecs.

## Swiftkey Algorithm 

- N-gram model with <b>Stupid back-off</b> strategy was used.

- Dataset cleaning included lower-casing, removing links, twitter handles, punctuations, numbers and extra whitespaces, etc.

- Matrices from 4-gram to uni-gram were extracted using ngram() package. 

- Reduced size of model by dropping least frequent N-grams.

- In the fields of computational linguistics and probability, an *n*-gram is a contiguous sequence of n items from a given sequence of text or speech. ([Source](http://en.wikipedia.org/wiki/N-gram))

- The next word prediction app is hosted on shinyapps.io: [https://nidabatt.shinyapps.io/Swiftkey/](https://nidabatt.shinyapps.io/Swiftkey/)

- Learn more about the Coursera Data Science Specialization: [https://www.coursera.org/specialization/jhudatascience/1](https://www.coursera.org/specialization/jhudatascience/1)
Â© 2017 GitHub, Inc.
